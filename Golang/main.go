package main

import (
	"fmt"
	"log"

	"github.com/sstallion/go-hid"
)

const VENDOR_ID = 0x046d
const PRODUCT_ID = 0xC54D

func main() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)

	var DevicePath string
	hid.Enumerate(VENDOR_ID, PRODUCT_ID, func(info *hid.DeviceInfo) error {
		log.Println("Usage:", info.Usage, ", UsagePage:", info.UsagePage)
		log.Printf("%s: ID %04x:%04x %s %s\n", info.Path, info.VendorID, info.ProductID, info.MfrStr, info.ProductStr)
		if info.Usage == 1 && info.UsagePage == 65280 {
			DevicePath = info.Path
		}
		return nil
	})

	// Initialize the hid package.
	if err := hid.Init(); err != nil {
		log.Fatal(err)
	}

	d, err := hid.OpenPath(DevicePath)
	if err != nil {
		log.Fatal(err)
	}

	d.SetNonblock(true)

	// Read the Manufacturer String.
	s, err := d.GetMfrStr()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Manufacturer String: %s\n", s)

	// Read the Product String.
	s, err = d.GetProductStr()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Product String: %s\n", s)

	// Read the Serial Number String.
	s, err = d.GetSerialNbr()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Serial Number String: %s\n", s)

	send(d, []byte{0x10, 0x01, 0x02, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x02, 0x1b, 0x01, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x02, 0x1b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x02, 0x1b, 0x01, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x06, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x4b, 0x00, 0x00, 0x00})

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x01, 0x01, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x01, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x03, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x04, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x05, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	send(d, []byte{0x10, 0x01, 0x0c, 0xbb, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x06, 0x1b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x1b, 0x01, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x2b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x4b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x1b, 0x01, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x2b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x4b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x06, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x0b, 0x01, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x4b, 0x00, 0x00, 0x00})

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x01, 0x01, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x01, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x02, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x03, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x04, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	for _, i := range []byte{0x10, 0x20, 0x30, 0x40, 0x50, 0x60, 0x70, 0x80, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xef} {
		send(d, []byte{0x11, 0x01, 0x0c, 0x5b, 0x00, 0x05, 0x00, i, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})
	}

	send(d, []byte{0x10, 0x01, 0x0c, 0xbb, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0d, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0d, 0x3b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x09, 0x5b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0a, 0x2b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x1b, 0x02, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0c, 0x2b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x06, 0x1b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0d, 0x1b, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x0d, 0x4b, 0x01, 0x02, 0x03, 0x04, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x09, 0x6b, 0x00, 0x06, 0x40, 0x06, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x09, 0x7b, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0b, 0x2b, 0x01, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0a, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x09, 0x6b, 0x00, 0x06, 0x40, 0x06, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x11, 0x01, 0x09, 0x7b, 0x00, 0x01, 0x40, 0x06, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x0b, 0x3b, 0x05, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x02, 0x0b, 0x00, 0x00, 0x00})

	send(d, []byte{0x10, 0x01, 0x02, 0x1b, 0x01, 0x00, 0x00})

	// Finalize the hid package.
	if err := hid.Exit(); err != nil {
		log.Fatal(err)
	}
}

func send(d *hid.Device, data []byte) {
	d.Write(data)
}

// func send(d *hid.Device, data []byte) {
// 	// log.Println("=>", dumpByteSlice(data))
// 	n, err := d.Write(data)
// 	if err != nil {
// 		// log.Println(err)
// 		return
// 	}
// 	if n == 0 {
// 		// log.Println("nichts geschrieben")
// 		return
// 	}
// 	return
// 	// - Short messages (7 Bytes) use report ID 0x10
// 	// - Long messages (20 Bytes) use report ID 0x11
// 	var respLength int
// 	switch {
// 	case data[0] == 0x10:
// 		respLength = 7
// 	case data[0] == 0x11:
// 		respLength = 20
// 	default:
// 		log.Println("ERR")
// 		return
// 	}

// 	buf := make([]byte, respLength)
// 	n, err = d.ReadWithTimeout(buf, time.Duration(time.Millisecond*150))
// 	// n, err = d.ReadWithTimeout(buf, time.Duration(time.Second*5))
// 	if err != nil {
// 		// log.Println(err)
// 		return
// 	}
// 	if n == 0 {
// 		// log.Println("nichts gelesen")
// 		return
// 	}
// 	// checkErrorResp(buf)
// 	log.Println("<=", dumpByteSlice(buf))
// }

// func dumpByteSlice(b []byte) (result string) {
// 	n := (len(b) + 15) &^ 15
// 	for i := 0; i < n; i++ {
// 		if i < len(b) {
// 			result += fmt.Sprintf("%02X ", b[i])
// 		}
// 	}
// 	return
// }

// func checkErrorResp(d []byte) bool {
// 	if len(d) < 3 {
// 		fmt.Println("d[2] == 0x8f")
// 		return true
// 	}
// 	if len(d) < 5 {
// 		fmt.Println("!d[5]")
// 		return true
// 	}
// 	if d[2] == 0x8f {
// 		switch d[5] {
// 		case 0x01:
// 			log.Println("ERR_INVALID_SUBID Invalid SubID / command")
// 			// Report ID Sub ID Description
// 			// 0x10 0x00 – 0x7f HID++ Reports & Notifications
// 			// 0x10 0x80 – 0xff Register Access
// 		case 0x02:
// 			log.Println("ERR_INVALID_ADDRESS Invalid address")
// 		case 0x03:
// 			log.Println("* ERR_INVALID_VALUE Invalid value")
// 		case 0x04:
// 			log.Println("ERR_CONNECT_FAIL Connection request failed (Receiver)")
// 		case 0x05:
// 			log.Println("ERR_TOO_MANY_DEVICES Too many devices connected (Receiver)")
// 		case 0x06:
// 			log.Println("ERR_ALREADY_EXISTS Already exists (Receiver)")
// 		case 0x07:
// 			log.Println("ERR_BUSY Busy (Receiver)")
// 		case 0x08:
// 			log.Println("ERR_UNKNOWN_DEVICE Unknown device (Receiver)")
// 		case 0x09:
// 			log.Println("ERR_RESOURCE_ERROR Resource error (Receiver)")
// 			// This error is returned by the receiver when an hidpp command has been sent to a device that is in
// 			// disconnected mode. When a device is in disconnected mode it cannot receive commands from the host
// 			// until it reconnects. A device reconnects when the user interacts with it. In most cases, a device
// 			// disconnects after several minutes of inactivity
// 		case 0x0A:
// 			log.Println("ERR_REQUEST_UNAVAILABLE 'Request not valid in current context' error")
// 		case 0x0B:
// 			log.Println("ERR_INVALID_PARAM_VALUE Request parameter has unsupported value")
// 		case 0x0C:
// 			log.Println("ERR_WRONG_PIN_CODE the PIN code entered on the device was wrong")
// 		default:
// 			log.Println("ERROR", d[5])
// 		}
// 		return true
// 	}
// 	return false
// }
